# Default values for ufm-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ufm-service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ufm-service.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: ufm-service-tls
  #    hosts:
  #      - ufm-service.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# UMF Service specific configuration
config:
  # Database configuration
  database:
    enabled: true
    url: "postgres://umf_user:umf_password@postgres:5432/umf_db?sslmode=disable"
  
  # Server configuration
  server:
    port: 8080
    
  # Telemetry configuration
  telemetry:
    enabled: true
    
  # Monitoring configuration
  monitoring:
    metrics:
      enabled: true
      port: 8080
      path: /metrics
    tracing:
      enabled: false
      jaeger:
        endpoint: ""
        
# Health check configuration
healthcheck:
  enabled: true
  path: /api/v1/system/ping
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

# External dependencies
postgresql:
  enabled: false
  # When enabled, this will deploy PostgreSQL as a dependency
  auth:
    postgresPassword: "password"
    database: "umf_db"
    
redis:
  enabled: false
  # When enabled, this will deploy Redis as a dependency

jaeger:
  enabled: false
  # When enabled, this will deploy Jaeger as a dependency